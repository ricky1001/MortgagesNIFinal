Basic authentication steps for node app

* Bonus info
--when using passport local we get a callback with a warning when someone tries to register with an existing username 

1. Add necessary packages npm install passport passport-local passport-local-mongoose express-session --save

2.require the newly imported packages to the app.js file passport = require("passport")
localStratagy = require("passport-local")

3. step define and set up the model for authentication username and password and require passport-local-mongoose in the models file

See Example 

var mongoose = require("mongoose");
var passportLocalMongoose = require("passport-local-mongoose");

var UserSchema.pluigin(passportLocalMongoose); // add in passport plugin

module.exports = mongoose.model("User", UserSchema);


4. Configure Passport :- in the app.js file set up a section for passport configuration see Example

//Passport configuration
app.use(require("express-session")({
    secret: "Surf at lissy MoFo",
    resave: false,
    saveUnitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());
passport.use(new localStratagy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());

5. Add Registration Routes - 
    Create an auth routes folder
    Create an auth views folder we will need a registration form page, a login form page

    The registration form will send a post request to /register add the registration route see example below 
        The registration will require 2 routes a get request to show the registration form 
       
    app.post("/register", function(req, res){
        var newUser = new User({username: req.body.username});
        User.register(newUser, req.body.password, function(err,user){
            if(err){
                console.log(err);
                res.render("/register");
            }else{
                passport.authenticate("local")(req, res, function(){
                    res.redirect("/login");
                })
            }
        })
    })

---- Login Routes
        Login will require 2 routes get and post
        Create a / login page to show the login form and a login route to render the form.


        Login Route Example 
       app.post("/login", passport.authenticate("local",
       {
           successRedirect: "/",
           failureRedirect: "/login"
       }), function(req, res){
        });

---- Log Out Route
     app.get("/logout", function(req, res){
         req.logout();
         res.redirect("/")
     });


6. Middleware - Create a function at the bottom of the app.js file it takes 3 arguments req, res, next

example

function isLoggedIn(req, res, next){
    if(req.isAuthnticated()){
        return next();
    }else{
        res.redirect("/register")
    }
}

7. See last video in webdevbootcamp this stage hides the login regiter buttons depending on the current users status 